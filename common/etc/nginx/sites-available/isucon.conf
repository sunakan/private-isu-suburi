upstream isuapp {
  #server localhost:8080;
  server unix:/var/run/isu-go/app.sock;

  # keepalive_requests
  #
  # docs: https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_requests
  # Syntax: keepalive_requests number;
  # Default: keepalive_requests 1000;(バージョン1.19.10より前のバージョンでは、デフォルト値は100)
  # Context: http, server, location
  # isuconでのおすすめ: keepalive_requests 1000000;
  #
  # keepalive_requestsは、1つのキープアライブ接続で処理できるリクエストの最大数を設定
  # この数に達すると、接続は閉じられる
  # キープアライブ接続を長く維持することで、TCP接続の確立と終了のオーバーヘッドを減らすことが可能
  # 接続の再利用率が向上し、TCP接続の確立と終了にかかるオーバーヘッドが減少
  # レスポンスタイムが改善される可能性
  keepalive_requests 1000000;

  # keepalive
  #
  # docs: https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
  # Syntax:	keepalive connections;
  # Default: 無し
  # Context: upstream
  # isuconでのおすすめ: keepalive 128;
  #
  # keepaliveディレクティブは、upstreamサーバーへのアイドル状態のキープアライブ接続の最大数を設定
  # これはupstreamブロック内で使用
  # キープアライブ接続を使用することで、新しい接続の確立にかかるオーバーヘッドを削減
  # TCPハンドシェイクの回数が減少
  # サーバーリソース（特にファイルディスクリプタ）の使用効率が向上
  # 設定値が大きすぎると、アイドル接続が多くなりリソースを無駄に消費する可能性
  # この値はNginxのワーカープロセスごとに適用されるため、全体的な接続数はこの値の倍数
  keepalive 128;
}

server {
  listen 80;
  root /home/isucon/private_isu/webapp/public/;

  # 静的ファイルをNginxから配信
  # クライアント側にキャッシュ(expires ***)する
  # /home/isucon/private_isu/webapp/public
  # ├── css
  # │   └── style.css
  # ├── favicon.ico
  # ├── img
  # │   └── ajax-loader.gif
  # └── js
  #     ├── main.js
  #     └── timeago.min.js
  location ~ ^/(favicon\.ico|css/|js/|img/) {
    expires 120s;
  }

  # 画像
  location ^~ /image/ {
    alias /home/isucon/private_isu/webapp/image/;
    expires 120s;
  }

  location / {
    # proxy_set_header
    #
    # docs
    # Syntax: proxy_set_header field value;
    # Default: proxy_set_header Host $proxy_host;
    #          proxy_set_header Connection close;
    # Context: http, server, location
    # isuconのおすすめ
    # proxy_set_header Host $host;
    # proxy_set_header Connection ""
    #
    # proxy_set_headerディレクティブは、プロキシサーバーにリクエストを送信する際に、特定のHTTPヘッダーフィールドを再定義または追加
    # proxy_set_header Connection ""にすることで
    # - HTTP/1.1の持続的接続（Keep-Alive）が可能
    # - バックエンドサーバーとの接続オーバーヘッドが減少し、全体的なレスポンス時間が改善される可能性
    #   - TCP接続の確立と終了にかかるオーバーヘッドが減少
    #   - 新しい接続を確立する必要がないため、リクエスト間のレイテンシが減少
    #   - 同時接続数が減少し、サーバーリソースを効率的に使用
    # - proxy_http_version 1.1;が必要になる
    #   - バックエンドサーバーもKeep-Aliveをサポートするように設定する必要がある
    # - 長時間のアイドル接続が増える可能性があり、適切なタイムアウト設定が必要になる
    #   - isuconではあまり心配しなくて良い
    proxy_set_header Host $host;
    proxy_set_header Connection "";
    proxy_http_version 1.1;

    # 基本的にproxy_passはupstream使う方が設定が楽
    proxy_pass http://isuapp;

    # proxy_buffers
    #
    # docs: https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffers
    # Syntax: proxy_buffers number size;
    # Default: proxy_buffers 8 4k|8k;
    # Context: http, server, location
    # isuconでのおすすめ: proxy_buffers 16 32k;
    # 32KBのバッファを16個使用(合計512KB)
    # メモリがちょっときつい場合は、proxy_buffers 16 4k;
    # 4kのバッファサイズは多くのシステムでメモリページサイズと一致し、効率的なメモリ使用を可能
    #
    # proxy_buffersディレクティブは、1つの接続に対して割り当てられるバッファの数とサイズを設定
    # これらのバッファは、プロキシサーバーからのレスポンスを保存するために使用
    # デフォルトのバッファサイズはメモリページ1枚分、プラットフォームによって4Kまたは8Kのいずれかになる
    # バッファサイズを大きくすると、大きなレスポンスを効率的に処理できるが、メモリ使用量が増加
    # バッファ数を増やすと、同時に処理できる接続数が増えるが、同様にメモリ使用量が増加
    # 小さすぎるバッファは頻繁なIO操作を引き起こす
    # 適切なバッファ設定により、IO操作を最小限に抑え、レスポンス時間を短縮
    # 1つのリクエストに対して使用するバッファの数とサイズを指定
    proxy_buffers 16 32k;

    # proxy_buffer_size
    #
    # docs: https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size
    # Syntax: proxy_buffers number size;
    # Default: proxy_buffers 8 4k|8k;
    # Context: http, server, location
    # isuconでのおすすめ: proxy_buffer_size 32k;
    #
    # proxy_buffer_sizeは、プロキシサーバーからのレスポンスの最初の部分（通常はヘッダー）を読み取り、保存するためのバッファサイズを設定
    # デフォルトでは、バッファサイズはメモリページ1枚分、プラットフォームによって4Kまたは8Kのいずれかになる
    # ただし、より小さく設定することも可能
    # サイズが小さすぎると、"upstream sent too big header while reading response header from upstream"エラーが発生する可能性
    # 大きすぎると、不必要にメモリを消費する可能性
    # 適切なサイズを設定することで、ヘッダー処理の効率が向上し、全体的なパフォーマンスが改善される可能性
    proxy_buffer_size 32k;

    # proxy_busy_buffers_size
    #
    # docs: https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_busy_buffers_size
    # Syntax: proxy_busy_buffers_size size;
    # Default: proxy_busy_buffers_size 8k|16k;(proxy_buffersの2バッファ分のサイズ)
    # Context: http, server, location
    # isuconでのおすすめ: proxy_busy_buffers_size 256k; (proxy_buffersの半分くらい)
    #
    # proxy_busy_buffers_sizeは、ビジー状態と見なされるバッファのサイズを設定
    # これらのバッファは、クライアントにレスポンスを送信している間、他の操作（例：ディスクへの書き込み）をブロックすることができます。
    # Nginxがクライアントにデータを送信しながら、同時にプロキシサーバーからデータを受信する能力に影響する
    # デフォルトでは、proxy_buffer_sizeとproxy_buffersディレクティブで設定された2つのバッファのサイズによって制限
    # 大きな値を設定すると、より多くのデータをメモリに保持できるため、IO操作を減らせる可能性があるが、メモリ使用量が増加
    # 小さすぎる値を設定すると、頻繁なIO操作が発生し、パフォーマンスが低下する可能性
    proxy_busy_buffers_size 256k;

    # proxy_temp_file_write_size
    #
    # docs: https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_temp_file_write_size
    # Syntax: proxy_temp_file_write_size size;
    # Default: proxy_temp_file_write_size 8k|16k;
    # Context: http, server, location
    # isuconでのおすすめ: proxy_temp_file_write_size 256k;
    #
    # proxy_temp_file_write_sizeは、一度の書き込み操作で書き込まれる一時ファイルのサイズを指定
    # Nginxが一時ファイルに書き込む際の効率性に影響
    # 値を大きくすると、一度の書き込み操作でより多くのデータを書き込めるため、書き込み操作の回数が減少し、IO効率が向上する可能性
    # 大きすぎる値を設定すると、メモリ使用量が増加する可能性
    proxy_temp_file_write_size 256k;
  }
}

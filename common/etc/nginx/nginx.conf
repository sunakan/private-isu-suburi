# コピペ用
# Nginxの***に関して、以下の項目をそれぞれ教えて下さい
# - documentのリンク
# - デフォ値
# - 設定の説明
# - パフォーマンス観点からの説明の詳細
# - isuconでのおすすめの設定値
# - isuconでのおすすめの設定値の理由
# - isuconでのおすすめの設定値による期待できる効果

# マスタープロセスのユーザー: root
# ワーカープロセスのユーザー: www-data
# ps aux | grep nginx
user www-data;

# worker_processes
#
# docs: https://nginx.org/en/docs/ngx_core_module.html#worker_processes
# Syntax:  worker_processes number | auto;
# Default: worker_processes 1;
# Context: main
# おすすめ: worker_processes auto;
#
# workerのプロセス数
# autoを指定すると、搭載されているCPUコア数を検出して設定してくれる
# 基本的にautoで良い(2coreなら2、4coreなら4)
worker_processes auto;

pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

# worker_rlimit_nofile
#
# docs: https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
# Syntax:  worker_rlimit_nofile number;
# Default: 無し(OSのデフォ値)
# Context: main
# おすすめ: worker_rlimit_nofile 65535(理論上の最大値)
# OSの制限値を超えないようにする(後述)
# 2倍の理由は、各worker接続は2つのファイルディスクリプタを使用する。各workerプロセスが最大限の接続を処理できるようにするため
# 1. クライアント用
# 2. アップストリーム or ファイル用
#
# 同時に利用できるファイルディスクリプタ数に関する、OSによる制限値。
# この値はworker毎の値で、ファイルやクライアントからの接続、バックエンドへの接続が全て含まれる
# Nginxの同時接続数の最大値: worker_processes * worker_connections
# アクセスがworkerに偏った場合、これよりは少ない接続数で限界を迎える
# これを設定することで、以下の効果を期待可能
# - エラーの減少: 「Too many open files」エラーを防ぐ
#
# 確認方法
# cat /proc/${worker_pid}/limits
# 例: cat /proc/7517/limits | grep -E '(Limit|open)'
# Limit                     Soft Limit           Hard Limit           Units
# Max open files            65535                65535                files
# OSの制限値確認方法
# cat /proc/sys/fs/file-max
# 9223372036854775807
worker_rlimit_nofile 65535;

events {
  # worker_connections
  #
  # docs: https://nginx.org/en/docs/ngx_core_module.html#worker_connections
  # Syntax:  worker_connections number;
  # Default: worker_connections 512;
  # Context: events
  #
  # worker_connectionsは、1つのワーカープロセスが同時に処理できる最大接続数を設定
  # この値を増やすことで、Nginxが同時に処理できる接続数が増加し、高負荷時のパフォーマンスが向上する可能性がある
  # おすすめ: 1024~4096
  # 設定をすることで、同時接続数が増加することで、より多くのクライアント要求を同時に処理可能になる
  # この値を変更するときは、worker_rlimit_nofileの値も適切に調整する必要あり
  # ※worker_rlimit_nofileは server {} の中に記述する
  worker_connections 4096;

  # multi_accept
  #
  # docs: https://nginx.org/en/docs/ngx_core_module.html#multi_accept
  # Syntax:  multi_accept on | off;
  # Default: multi_accept off;
  # Context: events
  # isuconでのおすすめ: multi_accept on;
  #
  # multi_acceptは、ワーカープロセスが新しい接続を処理する方法に影響を与える
  # off: ワーカープロセスは一度に1つの新しい接続のみを受け入れる
  # on: ワーカープロセスは一度に全ての新しい接続を受け入れる
  #
  # ISUCONは短時間で大量のリクエストを処理する必要があるため、multi_acceptをonにすることで、高負荷時の効率的な接続処理が可能
  multi_accept on;
}

http {

  ##
  # Basic Settings
  ##

  sendfile on;
  tcp_nopush on;
  types_hash_max_size 2048;


  # server_tokens
  #
  # docs: https://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens
  # Syntax: server_tokens on | off | build | string;
  # Default: server_tokens on;
  # Context: http, server, location
  # isuconでのおすすめ: server_tokens off
  #
  # server_tokensはパフォーマンスに直接的な影響を与えるディレクティブではない
  # このディレクティブは主にセキュリティに関連
  # バージョン情報を含まないことで、わずかながらレスポンスサイズを削減
  # 効果は極小
  server_tokens off;

  # server_names_hash_bucket_size 64;
  # server_name_in_redirect off;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  ##
  # SSL Settings
  ##

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
  ssl_prefer_server_ciphers on;

  ##
  # Logging Settings
  ##
  log_format ltsv "time:$time_iso8601"
    "\thost:$remote_addr"
    "\tforwardedfor:$http_x_forwarded_for"
    "\treq:$request"
    "\tstatus:$status"
    "\tmethod:$request_method"
    "\turi:$request_uri"
    "\tsize:$body_bytes_sent"
    "\treferer:$http_referer"
    "\tua:$http_user_agent"
    "\treqtime:$request_time"
    "\tapptime:$upstream_response_time"
    "\tvhost:$host"; # alp用のlog format
  # todo: 仕上げ時には off を設定(error_logはそのままで良い)
  # access_log off;
  # 末尾にltsvをつけ忘れないよう気をつける
  access_log /var/log/nginx/access.log ltsv;

  ##
  # Gzip Settings
  ##

  # gzip
  #
  # docs: http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip
  # Syntax:  gzip on | off;
  # Default: gzip off;
  # Context: http, server, location, if in location
  # isuconでのおすすめ: gzip on;
  #
  # gzipを有効にすると、レスポンスのサイズを大幅に削減できるが、CPUリソースを消費
  # ネットワーク帯域幅の使用量を減らし、ページの読み込み時間を短縮可能
  gzip on;

  # gzip_vary
  #
  # docs: https://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_vary
  # Syntax: gzip_vary on | off;
  # Default: gzip_vary off;
  # Context: http, server, location
  # isuconでのおすすめ: gizip_vary on;
  #
  # gzip_varyは、Nginxがgzip圧縮を行う際に「Vary: Accept-Encoding」ヘッダーをレスポンスに追加するかどうかを制御
  # このヘッダーは、キャッシュサーバーやCDNに対して、クライアントのAccept-Encodingヘッダーの値に応じて異なるバージョンのコンテンツをキャッシュする必要があることを伝える
  # このヘッダーにより、圧縮されたバージョンと非圧縮バージョンの両方が適切にキャッシュされ、クライアントに正しいバージョンが配信される
  # gzip圧縮をサポートしていないクライアントに対して、非圧縮コンテンツが確実に配信される
  gzip_vary on;

  # gzip_proxied
  #
  # docs: https://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_proxied
  # Syntax: gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;
  # Default: gzip_proxied off;
  # Context: http, server, location
  # isuconでのおすすめ: gzip_proxied any;
  #
  # gzip_proxiedは、プロキシ経由のリクエストに対するgzip圧縮の動作を制御
  # gzip_proxiedは、特定の条件下でプロキシされたリクエストに対する応答を圧縮するかどうかを決定
  # anyを指定することで、すべてのプロキシ経由のリクエストに対する応答を圧縮
  # 複雑な設定をせず、とりあえず圧縮
  gzip_proxied any;

  # gzip_comp_level
  #
  # docs: http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_comp_level
  # Syntax: gzip_comp_level level;
  # Default: gzip_comp_level 1;
  # Context: http, server, location
  # isuconでのおすすめ: gzip_comp_level 4
  #
  # gzip_comp_levelは、Nginxのgzip圧縮レベルを設定するディレクティブ
  # 値は1から9の範囲で設定可能
  # 値が大きいほど圧縮率が高くなるが、同時にCPU負荷も増加
  # 圧縮率とCPU負荷のバランスが良好な4
  gzip_comp_level 4;

  # gzip_buffers
  #
  # docs: http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_buffers
  # Syntax: gzip_buffers number size;
  # Default: gzip_buffers 32 4k|16 8k;
  # Context: http, server, location
  # isuconでのおすすめ: gzip_buffers 16 8k;
  #
  # gzip_buffersは、Nginxがgzip圧縮を行う際に使用するバッファの数とサイズを設定
  # gzip_buffersは圧縮プロセスを最適化し、サーバーのパフォーマンスを向上させる可能性がある
  # 適切なバッファサイズを設定することで、メモリ使用量を最適化
  # 適切なバッファ設定により、I/O操作を減らし、ディスクアクセスを最小限に抑える
  # 十分な大きさのバッファを確保することで、圧縮処理を効率的に行うことが可能
  # 16個の8KBバッファはバランスが良い
  # 8KBのバッファサイズは、多くのシステムでIO操作を効率化
  gzip_buffers 16 8k;

  # gzip_http_version
  #
  # docs: http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_http_version
  # Syntax: gzip_http_version 1.0 | 1.1;
  # Default: gzip_http_version 1.1;
  # Context: http, server, location
  # isuconでのおすすめ: gzip_http_version 1.0;
  #
  # gzip_http_versionは、Nginxがgzip圧縮を適用するHTTPバージョンの最小値を設定
  # gzip_http_versionは、特定のHTTPバージョン以上のリクエストに対してのみgzip圧縮を適用することで、互換性とパフォーマンスのバランスを取る
  gzip_http_version 1.0;

  # gzip_types
  #
  # Syntax: gzip_types mime-type ...;
  # Default: gzip_types text/html;
  # Context: http, server, location
  # isuconでのおすすめ: gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
  #
  # 多様なコンテンツを圧縮できるようになる
  # application/jsonの圧縮により、APIレスポンスのサイズが大幅に削減される可能性がある
  # CSS,JS,XMLファイルの圧縮により、静的ファイルの配信が最適化される
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  # open_file_cache
  #
  # docs: https://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache
  # Syntax: open_file_cache off;
  #         open_file_cache max=N [inactive=time];
  # Default: open_file_cache off;
  # Context: http, server, location
  # isuconでのおすすめ:
  # open_file_cache max=1000 inactive=20s;
  # open_file_cache_valid 30s;
  # open_file_cache_min_uses 2;
  # open_file_cache_errors on;
  #
  # open_file_cacheとその関連ディレクティブは、ファイルメタデータのキャッシュを制御
  # ファイル情報をメモリにキャッシュすることで、ディスクアクセスが減少
  # ファイル情報の繰り返し検索が減少し、CPU使用率が低下
  # キャッシュされたファイル情報を使用することで、静的ファイルの配信が高速化
  # ファイルディスクリプタの再利用により、システムリソースを効率的に使用
  # open_file_cacheは動的なレスポンス内容自体をキャッシュしない
  # open_file_cacheは主にファイルのメタデータ（ファイルディスクリプタ、ファイルの存在、サイズ、最終更新時刻など）をキャッシュ
  # 動的なコンテンツ自体はキャッシュしない
  # 動的リクエストでも、Nginxはまずファイルの存在をチェック
  # 動的コンテンツを生成するスクリプトファイル（例：PHP）のファイルディスクリプタがキャッシュされる可能性がある
  # open_file_cacheはこのチェックを高速化
  # 時間によって変わるレスポンスが誤ってキャッシュされる心配はない
  #
  # max=1000 inactive=20s
  # 頻繁にアクセスされるファイルを効率的にキャッシュしつつ、不要なキャッシュを素早く削除
  # open_file_cache_valid 30s
  # 短めの間隔でキャッシュの有効性を確認し、ファイルの変更を迅速に反映
  # open_file_cache_min_uses 2
  # 2回以上アクセスされたファイルをキャッシュすることで、不要なキャッシュを防ぎつつ、頻繁にアクセスされるファイルを効率的にキャッシュ
  # open_file_cache_errors on
  # エラーもキャッシュすることで、存在しないファイルへの繰り返しアクセスによる負荷を軽減
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  # client_max_body_size
  #
  # Syntax: client_max_body_size size;
  # Default: client_max_body_size 1m;
  # Context: http, server, location
  # isuconでのおすすめ: client_max_body_size 10 ~ 20m
  #
  # クライアントのリクエスト本文の最大許容サイズを設定
  # リクエストのサイズが設定値を超える場合、413（リクエストエンティティが大き過ぎる）エラーがクライアントに返される
  # ブラウザではこのエラーを正しく表示できないことに注意
  # サイズを0に設定すると、クライアントのリクエスト本文のサイズの確認が無効
  # サーバーリソースの保護とDDoS攻撃の防止に役立つ
  # 大きすぎる値を設定すると、大量のデータアップロードによってサーバーのメモリやディスク容量が圧迫される可能性がある
  # 小さすぎる値を設定すると、正当な大きなファイルのアップロードが制限される可能性がある
  #
  client_max_body_size 20m;

  ##
  # Virtual Host Configs
  ##

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;
}


# todo: https://blog.nginx.org/blog/performance-tuning-tips-tricks
